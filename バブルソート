バブルソート問題

# バブルソートとは
与えられたデータ列を大小などの順序通りになるよう並べ替えるソート（整列）アルゴリズムの最も基本的な手法の一つで、端から順番に隣接する要素同士を比較・交換していくもの。
列の一方の端から反対の端まで順番に行うことが多く、繰り返しの度に未整列の要素の中で最も大きな（あるいは小さな）要素が列の端に移動していく様子を泡（バブル）が浮き上がっていく様に例えてこのような名称。

問題
以下の要件を満たすbubble_sortメソッドを実装せよ
・要素が数値である配列を受け取り、数値の小さい順に並べ替えること
・小さい順に並べ替えた結果を出力すること

雛形
def bubble_sort(data)
  # 配列の数を数える処理を記述
  length = 

  # for文を2つ使用する
  # 先頭から隣の数同士の大きさを比べる
  # 先頭側の要素の方が大きい場合は、配列の位置を隣同士で交換する
end

呼び出し例
number = [1,23,4,6,12,45,79]
bubble_sort(number)
puts number

for文
for文は、指定された範囲や配列を順に変数に代入し、範囲や配列の要素の数だけ処理を繰り返して実行する。

for i in 0..4 #0から4の数が順に変数iに代入される。0~4の5回分処理を繰り返す。
  puts i
end
=> 出力結果

0
1
2
3
4

for文は入れ子にすることができる。今回のプログラムでは、for文を2つ入れ子にして使用する。
その場合、下記のように親のfor文の繰り返し処理1回が実行されるごとに、子のfor文の処理が全ての回数分繰り返されます。

for i in 0..1 #0,1の数が順に変数iに代入される。0~1の2回分繰り返す。
  puts i
  for j in 2..4 #2,3,4の数が順に変数jに代入される。2~4の3回分繰り返す。
   puts j
  end
end
=> 出力結果

0 #親のfor文の1回目処理結果　　つまり親の0に対する子２〜４
2 　#子のfor文の1回目処理結果
3 　#子のfor文の2回目処理結果
4 　#子のfor文の3回目処理結果

1 #親のfor文の2回目処理結果　つまり親の１に対する子の2〜4
2　#子のfor文の1回目処理結果
3　#子のfor文の1回目処理結果
4　#子のfor文の3回目処理結果

配列内の要素の入れ替え方
配列arrayのa番目とb番目の要素を入れ替えたいときは、以下のようにコードを記述する。
「隣同士の大きさを比較し、もし先頭側の文字の方が大きい場合は位置を交換する」という処理を実装する際も同様のコードで記述する

array[a], array[b] = array[b], array[a]　　# [a]と[b]を入れ替えている

配列の先頭から順に隣同士の数の大きさを比較
if文は「隣同士の数を比べて、前の数の方が大きければ」という条件
if文の条件に当てはまった場合のみ、配列の位置を交換

模範回答
def bubble_sort(data)
  length = data.length 
  for i in 0..(length-1) 
    for j in 1.. (length-i-1) 
      if data[j-1] > data[j] 
        data[j-1],data[j] = data[j],data[j-1] 
      end
    end
  end
end

number =  [1,23,4,6,12,45,79]
bubble_sort(number)
puts number
